
// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules for authenticated users
    match /{document=**} {
      allow read, write: if false; // Default deny
    }
    
    // Profiles collection
    match /profiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Organizations collection
    match /organizations/{organizationId} {
      // Allow read if user is authenticated and is a member of the organization
      allow read: if request.auth != null;
      // Allow create if user is authenticated
      allow create: if request.auth != null;
      // Allow update, delete if user is admin of the organization
      allow update, delete: if request.auth != null && isOrgAdmin(organizationId);
      
      // Function to check if user is admin
      function isOrgAdmin(orgId) {
        return exists(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId)) &&
               get(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId)).data.role == "admin";
      }
    }
    
    // Organization members collection
    match /organization_members/{memberId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
                          (memberId.split('_')[0] == request.auth.uid || 
                           isOrgAdmin(memberId.split('_')[1]));
      
      function isOrgAdmin(orgId) {
        return exists(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId)) &&
               get(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId)).data.role == "admin";
      }
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if request.auth != null && canAccessProject(projectId);
      allow create: if request.auth != null && canAccessOrg(request.resource.data.organization_id);
      allow update, delete: if request.auth != null && canAccessProject(projectId);
      
      function canAccessProject(projId) {
        let project = get(/databases/$(database)/documents/projects/$(projId));
        return canAccessOrg(project.data.organization_id);
      }
      
      function canAccessOrg(orgId) {
        return exists(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId));
      }
    }
    
    // Files collection (replacing Storage with Firestore)
    match /files/{fileId} {
      allow read: if request.auth != null && canAccessFileOrg();
      allow create: if request.auth != null && canAccessFileOrg();
      allow update, delete: if request.auth != null && 
                          (resource.data.uploadedBy == request.auth.uid || 
                           isOrgAdmin(resource.data.organizationId));
      
      function canAccessFileOrg() {
        return request.resource.data.organizationId == null || 
               exists(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + request.resource.data.organizationId));
      }
      
      function isOrgAdmin(orgId) {
        return exists(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId)) &&
               get(/databases/$(database)/documents/organization_members/$(request.auth.uid + '_' + orgId)).data.role == "admin";
      }
    }
  }
}
